{"version":3,"sources":["Components/LoadingCard.tsx","Data/Key.ts","Data/CurrencyListData.ts","Data/CurrencyConversion.ts","Components/HistoryChart.tsx","Components/ErrorCard.tsx","LoadingEnum.ts","Data/CurrencyHistoryData.ts","Data/CryptoListData.ts","Components/CurrencyConversion.tsx","Components/CryptoTableList.tsx","Components/CryptocurrencyOverview.tsx","Components/About.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["LoadingCard","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","show","react_default","a","createElement","Card_default","className","Body","Spinner_default","animation","variant","text","Title","Component","API_KEY","API_URL","_callee","response","responseData","dataArray","key","regenerator_default","wrap","_context","prev","next","fetch","sent","ok","json","results","t0","keys","t1","done","value","hasOwnProperty","abrupt","push","stop","source","target","url","baseValue","concat","status","originalValue","calculatedValue","HistoryChartMode","ErrorCard","src","alt","LoadingState","HistoryChart","mode","Empty","Loading","Components_LoadingCard","Loaded","index_esm","chartType","loader","data","chartData","options","title","hAxis","vAxis","rootProps","data-testid","Failed","Components_ErrorCard","t2","CryptoListSortMode","CurrencyConversion","_this","state","loadingState","displayFormValidation","currencies","currencyName","id","result","isCalculating","chartMode","event","_this2","form","currentTarget","preventDefault","stopPropagation","checkValidity","setState","_x","_x2","_x3","_convertValue","apply","arguments","convertValue","then","reason","_getCurrencyHistoryData","getCurrencyHistoryData","console","log","_this3","_getCurrencies","getCurrencies","btnCalculate","_this4","Button_default","type","disabled","as","size","role","aria-hidden","Form_default","validated","onSubmit","e","onFormSubmit","FormGroup","Row_default","Col_default","md","Control","map","currency","placeholder","step","required","Feedback","Components_HistoryChart","sort","index","element","DailyVolume","MarketCap","Data","imageUrl","CoinInfo","ImageUrl","name","Name","fullName","FullName","RAW","USD","PRICE","proofType","ProofType","CryptoTableList","cryptoCurrencies","errorMsg","_getCryptoList","getCryptoList","cryptoSortMode","Table_default","striped","bordered","hover","width","height","CryptocurrencyOverview","Components_CryptoTableList","About","app-content","href","App","navBarBtnState","react_router_dom","basename","Navbar_default","expand","Brand","Link","to","onClick","Toggle","aria-controls","Collapse","Nav_default","active","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3511ebaa.chunk.js","sourcesContent":["import React, {Component, FormEvent, ReactNode} from 'react';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport CurrencyConversion from \"./CurrencyConversion\";\r\n\r\ninterface IProps {\r\n    text: string\r\n    show: boolean\r\n}\r\n\r\nclass LoadingCard extends Component<IProps,any> {\r\n    constructor(props: IProps) {\r\n        super(props)\r\n    }\r\n\r\n    render(): ReactNode {\r\n        if (this.props.show) {\r\n            return (\r\n                <Card className=\"text-center\">\r\n                    <Card.Body>\r\n                        <div className=\"align-content-center\">\r\n                            <Spinner animation=\"border\" variant=\"primary\" text/>\r\n                            <br/><br/>\r\n                            <Card.Title><strong>{this.props.text}</strong></Card.Title>\r\n                        </div>\r\n                    </Card.Body>\r\n                </Card>\r\n            );\r\n        }\r\n        else {\r\n            return (null);\r\n        }\r\n    }\r\n}\r\n\r\nexport default LoadingCard;","\r\nexport var API_KEY: string = \"ce8e299f65ef878dcdcd\";\r\nexport var API_URL: string = \"https://free.currconv.com\";","import {API_KEY, API_URL} from \"./Key\";\r\n\r\nexport interface ICurrency {\r\n    currencyName: string,\r\n    currencySymbol?: string,\r\n    id: string\r\n}\r\n\r\nexport async function getCurrencies(): Promise<ICurrency[]> {\r\n    let response: Response = await fetch(API_URL + \"/api/v7/currencies?apiKey=\" + API_KEY);\r\n    \r\n    if (!response.ok) throw \"Failed to load data!\";\r\n    \r\n    let responseData = (await response.json()).results;\r\n    let dataArray: ICurrency[] = [];\r\n    \r\n    // Transfer the data into a proper array so we can iterate through it easier\r\n    for (let key in responseData) {\r\n        if (!responseData.hasOwnProperty(key)) continue;\r\n        dataArray.push(responseData[key]);\r\n    }\r\n    \r\n    return dataArray;\r\n}","import {API_KEY, API_URL} from \"./Key\";\r\n\r\nexport interface IConversionResult {\r\n    source: string,\r\n    originalValue: number,\r\n    target: string,\r\n    calculatedValue: number\r\n}\r\n\r\nexport async function convertValue(source: string, value: number, target: string): Promise<IConversionResult> {\r\n    const url: string = `${API_URL}/api/v7/convert?q=${source}_${target}&compact=ultra&apiKey=${API_KEY}`;\r\n    let response: Response = await fetch(url);\r\n\r\n    if (!response.ok) throw `Server encountered an error! (${response.status})`;\r\n    \r\n    let responseData = await response.json();\r\n    let baseValue: number = responseData[source + \"_\" + target];\r\n    \r\n    return {\r\n        source: source,\r\n        originalValue: value,\r\n        target: target,\r\n        calculatedValue: value * baseValue\r\n    }\r\n}","import React, {Component, FormEvent, ReactNode} from 'react';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Spinner from \"./LoadingCard\";\r\nimport LoadingCard from \"./LoadingCard\";\r\nimport Chart from 'react-google-charts';\r\nimport ErrorCard from \"./ErrorCard\";\r\n\r\nexport enum HistoryChartMode {\r\n    Empty,\r\n    Loading,\r\n    Loaded,\r\n    Failed\r\n}\r\n\r\ninterface IHistoryChartProps {\r\n    mode: HistoryChartMode,\r\n    chartData: any\r\n}\r\n\r\nclass HistoryChart extends Component<IHistoryChartProps, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        switch (this.props.mode) {\r\n            case HistoryChartMode.Empty:\r\n                return (\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title>Statistics</Card.Title>\r\n                            <div className=\"align-content-center\">\r\n                                <br/>\r\n                                <Card.Title><strong>No Data to display in the chart.</strong></Card.Title>\r\n                                <p>When converting a currency value into another currency, this chart will automaticly\r\n                                    be loaded\r\n                                    with information regarding the currency's value in the past week.</p>\r\n                            </div>\r\n                        </Card.Body>\r\n                    </Card>\r\n                );\r\n            case HistoryChartMode.Loading:\r\n                return (<LoadingCard text={\"Loading statistics data...\"} show={true}/>);\r\n            case HistoryChartMode.Loaded:\r\n                return (\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title>Statistics</Card.Title>\r\n                            <Chart\r\n                                chartType=\"LineChart\"\r\n                                loader={<LoadingCard text={\"Creating Line Chart...\"} show={true}/>}\r\n                                data={this.props.chartData}\r\n                                options={{\r\n                                    title: \"Currency value since last week\",\r\n                                    hAxis: {\r\n                                        title: 'Date',\r\n                                    },\r\n                                    vAxis: {\r\n                                        title: 'Currency Value',\r\n                                    },\r\n                                }}\r\n                                rootProps={{'data-testid': '1'}}\r\n                            />\r\n                        </Card.Body>\r\n                    </Card>\r\n                );\r\n            case HistoryChartMode.Failed:\r\n                return <ErrorCard text=\"Failed to retrieve history data!\"/>\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default HistoryChart","import React, {Component, FormEvent, ReactNode} from 'react';\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\n\r\ninterface IProps {\r\n    text: string\r\n}\r\n\r\nclass ErrorCard extends Component<IProps,any> {\r\n    constructor(props: IProps) {\r\n        super(props)\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return (\r\n            <Card className=\"text-center\">\r\n                <Card.Body>\r\n                    <div className=\"align-content-center\">\r\n                        <img src={\"./error.png\"} alt=\"Error Icon\" />\r\n                        <br/>\r\n                        <Card.Title><strong>{this.props.text}</strong></Card.Title>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ErrorCard;","export enum LoadingState {\r\n    Loading,\r\n    Loaded,\r\n    Failed\r\n}","import {API_KEY, API_URL} from \"./Key\";\r\n\r\nexport async function getCurrencyHistoryData(source: string, target: string) {\r\n    const url: string = `${API_URL}/api/v7/convert?q=${source}_${target}&compact=ultra&date=2019-04-04&endDate=2019-04-12&apiKey=${API_KEY}`;\r\n    let response: Response = await fetch(url);\r\n\r\n    if (!response.ok) throw \"Failed to load data!\";\r\n    \r\n    let responseData = (await response.json())[source+\"_\"+target];\r\n    let dataArray = [[\"date\", target]];\r\n    for (let key in responseData) {\r\n        if (!responseData.hasOwnProperty(key)) continue;\r\n        dataArray.push([key, responseData[key]]);\r\n    }\r\n    \r\n    return dataArray;\r\n}","const API_URL = \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD\";\r\n\r\nexport interface ICryptoCurrency {\r\n    imageUrl: string,\r\n    name: string,\r\n    fullName: string,\r\n    value: string,\r\n    proofType: string\r\n}\r\n\r\nexport enum CryptoListSortMode {\r\n    DailyVolume,\r\n    MarketCap\r\n}\r\n\r\nexport async function getCryptoList(sort: CryptoListSortMode ): Promise<ICryptoCurrency[]> {\r\n    let url;\r\n    // Get the correct URL. Each sorting mode has its own endpoint\r\n    switch (sort) {\r\n        case CryptoListSortMode.DailyVolume:\r\n            url = \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit=10&tsym=USD\";\r\n            break;\r\n        case CryptoListSortMode.MarketCap:\r\n            url = \"https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD\";\r\n            break;\r\n        default:\r\n            throw \"No sort mode specified during getCryptoList call!\";\r\n    }\r\n    \r\n    // Verify request was successful\r\n    let response: Response = await fetch(url);\r\n    if (!response.ok) {\r\n        throw `Failed to get crypto data! (${response.status})`;\r\n    }\r\n    \r\n    // Read the response data and create a data array that we can return\r\n    let data: ICryptoCurrency[] = [];\r\n    let responseData = await response.json();\r\n    for (let index in responseData.Data) {\r\n        let element = responseData.Data[index];\r\n        data.push({\r\n            imageUrl: element.CoinInfo.ImageUrl,\r\n            name: element.CoinInfo.Name,\r\n            fullName: element.CoinInfo.FullName,\r\n            value: element.RAW.USD.PRICE  + \" USD\",\r\n            proofType: element.CoinInfo.ProofType\r\n        });\r\n    }\r\n    \r\n    return data;\r\n}\r\n\r\nexport function getImageUrl(imageUrl: string): string {\r\n    return \"https://www.cryptocompare.com\" + imageUrl;\r\n}","import React, {Component, ReactNode} from 'react';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport {FormGroup} from \"react-bootstrap\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport LoadingCard from \"./LoadingCard\";\r\nimport {getCurrencies, ICurrency} from \"../Data/CurrencyListData\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport {convertValue, IConversionResult} from \"../Data/CurrencyConversion\";\r\nimport HistoryChart, {HistoryChartMode} from \"./HistoryChart\";\r\nimport {getCurrencyHistoryData} from \"../Data/CurrencyHistoryData\";\r\nimport {LoadingState} from \"../LoadingEnum\";\r\n\r\n// Define the content and types of the component state\r\ninterface ICurrencyConversionState {\r\n    loadingState: LoadingState,\r\n    currencies: ICurrency[];\r\n    displayFormValidation: boolean,\r\n    result: string,\r\n    isCalculating: boolean,\r\n    chartMode: HistoryChartMode\r\n    chartData: any\r\n}\r\n\r\nclass CurrencyConversion extends Component<any, ICurrencyConversionState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            loadingState: LoadingState.Loading,\r\n            displayFormValidation: false,\r\n            currencies: [{currencyName: \"null\", id: \"null\"}],\r\n            result: \"\",\r\n            isCalculating: false,\r\n            chartMode: HistoryChartMode.Empty,\r\n            chartData: []\r\n        };\r\n    }\r\n\r\n    private onFormSubmit(event: any): void {\r\n        const form: HTMLSelectElement = event.currentTarget;\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (form.checkValidity() === true) {\r\n            // Get submitted form data\r\n            const source: string = event.target[0].value;\r\n            const value: number = event.target[1].value;\r\n            const target: string = event.target[2].value;\r\n            this.setState({result: \"Calculating...\", isCalculating: true, chartMode: HistoryChartMode.Loading});\r\n\r\n            // Get data\r\n            convertValue(source, value, target).then(\r\n                (data: IConversionResult) => {\r\n                    // Update state by updating the result string and disabling the loading button\r\n                    this.setState({\r\n                        isCalculating: false,\r\n                        result: `${data.originalValue} ${data.source} = ${data.calculatedValue} ${data.target}`\r\n                    });\r\n                },\r\n                (reason) => {\r\n                    this.setState({\r\n                        isCalculating: false,\r\n                        result: reason\r\n                    });\r\n                }\r\n            );\r\n\r\n            // Load statistics chart\r\n            getCurrencyHistoryData(source, target).then(\r\n                (data) => {\r\n                    console.log(data);\r\n                    this.setState({\r\n                        chartMode: HistoryChartMode.Loaded,\r\n                        chartData: data\r\n                    })\r\n                },\r\n                (reason) => {\r\n                    this.setState({\r\n                        chartMode: HistoryChartMode.Failed\r\n                    });\r\n                }\r\n            );\r\n\r\n        } else {\r\n            this.setState({displayFormValidation: true});\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        getCurrencies().then(\r\n            (data) => this.setState({loadingState: LoadingState.Loaded, currencies: data}),\r\n            (reason) => this.setState({loadingState: LoadingState.Failed})\r\n        );\r\n    }\r\n\r\n    render(): ReactNode {\r\n        let btnCalculate;\r\n        if (this.state.isCalculating) {\r\n            btnCalculate = (\r\n                <Button type=\"submit\" disabled><Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\"\r\n                                                        aria-hidden=\"true\"/> Calculate</Button>\r\n            );\r\n        } else {\r\n            btnCalculate = <Button type=\"submit\">Calculate</Button>\r\n        }\r\n\r\n        return (\r\n            <div className=\"app-content\">\r\n                <h1>Main Page</h1>\r\n                <hr/>\r\n                <strong>On this page, you can peform currency conversion!</strong><br/>\r\n                <p>You can choose the source currency with the left dropdown and then choose the target currency with\r\n                    the right dropdown.\r\n                    When entering a currency value, please ensure that it only contains numbers with 2 decimals max!</p>\r\n                <br/>\r\n                <LoadingCard show={this.state.loadingState === LoadingState.Loading} text=\"Loading currency data...\"/>\r\n                {this.state.loadingState === LoadingState.Loaded &&\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Card.Title>Conversion</Card.Title>\r\n                        <Form validated={false} onSubmit={(e: any) => {\r\n                            this.onFormSubmit(e)\r\n                        }}>\r\n                            <FormGroup>\r\n                                <Row>\r\n                                    <Col md=\"2\">\r\n                                        <Form.Control as=\"select\">\r\n                                            {this.state.currencies.map((currency: ICurrency) => <option\r\n                                                value={currency.id}>{currency.currencyName}</option>)}\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Control type=\"number\" placeholder=\"Value to be converted\" step=\".01\"\r\n                                                      required/>\r\n                                        <Form.Control.Feedback type=\"invalid\">\r\n                                            Please enter a valid amount!\r\n                                        </Form.Control.Feedback>\r\n                                    </Col>\r\n                                    <Col md=\"2\">\r\n                                        <Form.Control as=\"select\">\r\n                                            {this.state.currencies.map((currency: ICurrency) => <option\r\n                                                value={currency.id}>{currency.currencyName}</option>)}\r\n                                        </Form.Control>\r\n                                    </Col>\r\n                                </Row>\r\n                                <br/>\r\n                                <Row>\r\n                                    <Col md=\"2\">\r\n                                        {btnCalculate}\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <h4>{this.state.result}</h4>\r\n                                    </Col>\r\n                                </Row>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </Card.Body>\r\n                </Card>\r\n                }\r\n                <br/>\r\n                <HistoryChart mode={this.state.chartMode} chartData={this.state.chartData}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default CurrencyConversion","import React, {Component, ReactNode} from 'react';\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport {CryptoListSortMode, getCryptoList, getImageUrl, ICryptoCurrency} from \"../Data/CryptoListData\";\r\nimport LoadingCard from \"./LoadingCard\";\r\nimport ErrorCard from \"./ErrorCard\";\r\nimport {LoadingState} from \"../LoadingEnum\";\r\n\r\ninterface ICryptoTableListState {\r\n    loadingState: LoadingState\r\n    cryptoCurrencies: ICryptoCurrency[],\r\n    errorMsg: string\r\n}\r\n\r\ninterface ICryptoTableListProps {\r\n    cryptoSortMode: CryptoListSortMode,\r\n    title: string\r\n}\r\n\r\nclass CryptoTableList extends Component<ICryptoTableListProps, ICryptoTableListState> {\r\n    constructor(props: ICryptoTableListProps) {\r\n        super(props);\r\n        this.state = {\r\n            loadingState: LoadingState.Loading,\r\n            cryptoCurrencies: [],\r\n            errorMsg: \"null\"\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        getCryptoList(this.props.cryptoSortMode).then(\r\n            (data: ICryptoCurrency[]) => {\r\n                this.setState({\r\n                    loadingState: LoadingState.Loaded,\r\n                    cryptoCurrencies: data\r\n                });\r\n            },\r\n            (reason) => {\r\n                this.setState({\r\n                    loadingState: LoadingState.Failed,\r\n                    errorMsg: reason\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    render(): ReactNode {\r\n        switch (this.state.loadingState) {\r\n            case LoadingState.Loading:\r\n                return <LoadingCard text=\"Loading data...\" show={true}/>;\r\n            case LoadingState.Loaded:\r\n                return (\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title>{this.props.title}</Card.Title>\r\n                            <Table striped bordered hover>\r\n                                <thead>\r\n                                <tr>\r\n                                    <th>Icon</th>\r\n                                    <th>Name</th>\r\n                                    <th>Full Name</th>\r\n                                    <th>Value</th>\r\n                                    <th>Proof Type</th>\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {\r\n                                    this.state.cryptoCurrencies.map((element) => {\r\n                                        return (\r\n                                            <tr>\r\n                                                <td><img src={getImageUrl(element.imageUrl)} width=\"30\" height=\"30\" alt=\"crypto icon\"/></td>\r\n                                                <td>{element.name}</td>\r\n                                                <td>{element.fullName}</td>\r\n                                                <td>{element.value}</td>\r\n                                                <td>{element.proofType}</td>\r\n                                            </tr>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                </tbody>\r\n                            </Table>\r\n                        </Card.Body>\r\n                    </Card>\r\n                );\r\n                \r\n            case LoadingState.Failed:\r\n                return <ErrorCard text={this.state.errorMsg}/>\r\n        }\r\n    }\r\n}\r\n\r\nexport default CryptoTableList","import React, {Component, ReactNode} from 'react';\r\nimport CryptoTableList from \"./CryptoTableList\";\r\nimport {CryptoListSortMode} from \"../Data/CryptoListData\";\r\nimport ErrorCard from \"./ErrorCard\";\r\n\r\n\r\nclass CryptocurrencyOverview extends Component {\r\n    render(): ReactNode {\r\n        return (\r\n            <div className=\"app-content\">\r\n                <h1>Cryptocurrency Overview</h1>\r\n                <hr/>\r\n                <strong>On this page, you can see a list of popular currencies.</strong>\r\n                <br/><br/>\r\n                <CryptoTableList title=\"Top cryptocurrencies by 24H Volume\" cryptoSortMode={CryptoListSortMode.DailyVolume} />\r\n                <br/>\r\n                <CryptoTableList title=\"Top cryptocurrencies by Market Cap\" cryptoSortMode={CryptoListSortMode.MarketCap} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CryptocurrencyOverview","import React, {Component, FormEvent, ReactNode} from 'react';\r\nimport CryptoTableList from \"./CryptocurrencyOverview\";\r\nimport {CryptoListSortMode} from \"../Data/CryptoListData\";\r\n\r\nclass About extends Component {\r\n\r\n    render(): ReactNode {\r\n        return (\r\n            <div app-content>\r\n                <div className=\"app-content\">\r\n                    <h1>About</h1>\r\n                    <hr/>\r\n                    <strong>Purpose</strong>\r\n                    <p>The purpose of this website was to be a learning experience with React. \r\n                        This is my first serious attempt at building a React website.\r\n                    </p>\r\n                    <br/>\r\n                    <strong>Disclaimer</strong>\r\n                    <p>As already said, this site was mainly for educational purposes. Please do not use this website for actual professionel needs.\r\n                    You will be setting yourself up for disappointment!</p>\r\n                    <br/>\r\n                    <strong>Source code</strong>\r\n                    <p>\r\n                        The source code for this website can be found in my public GitHub repository. <a href=\"https://github.com/OkanEmeni/react-currency-converter\">Click here to go to the repository.</a>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React, {Component} from 'react';\r\nimport '../css/App.css';\r\nimport \"../css/logo.svg\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport CurrencyConversion from \"./CurrencyConversion\";\r\nimport {Route, Link, BrowserRouter as Router, Switch, HashRouter} from 'react-router-dom'\r\nimport CryptocurrencyOverview from \"./CryptocurrencyOverview\";\r\nimport About from \"./About\";\r\n\r\ninterface IAppState {\r\n    navBarBtnState: number\r\n}\r\n\r\nclass App extends Component<any, IAppState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            navBarBtnState: 0\r\n        };\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return (\r\n            <HashRouter basename=\"/\">\r\n                <div className=\"App\">\r\n                    <Navbar variant=\"dark\" expand=\"lg\">\r\n                        <Navbar.Brand as={Link} to=\"/\" onClick={() => {\r\n                            this.setState({navBarBtnState: 0})\r\n                        }}>\r\n                            <img\r\n                                src={\"./logo.png\"}\r\n                                width=\"30\"\r\n                                height=\"30\"\r\n                                className=\"d-inline-block align-top\"\r\n                                alt=\"React Bootstrap logo\"\r\n                            /> Currency Converter</Navbar.Brand>\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"mr-auto\">\r\n                                <Nav.Link as={Link}\r\n                                          to=\"/\"\r\n                                          active={this.state.navBarBtnState === 0}\r\n                                          onClick={() => {\r\n                                              this.setState({navBarBtnState: 0})\r\n                                          }}>\r\n                                    Conversion\r\n                                </Nav.Link>\r\n                                <Nav.Link as={Link}\r\n                                          to=\"/cryptocurrency\"\r\n                                          active={this.state.navBarBtnState === 1}\r\n                                          onClick={() => {\r\n                                              this.setState({navBarBtnState: 1})\r\n                                          }}>\r\n                                    Cryptocurrency\r\n                                </Nav.Link>\r\n                                <Nav.Link as={Link}\r\n                                          to=\"/about\"\r\n                                          active={this.state.navBarBtnState === 2}\r\n                                          onClick={() => {\r\n                                              this.setState({navBarBtnState: 2})\r\n                                          }}>\r\n                                    About\r\n                                </Nav.Link>\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Navbar>\r\n                    <br/>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={CurrencyConversion}/>\r\n                        <Route path=\"/cryptocurrency\" component={CryptocurrencyOverview}/>\r\n                        <Route path=\"/about\" component={About}/>\r\n                    </Switch>\r\n                    <br/>\r\n                </div>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}